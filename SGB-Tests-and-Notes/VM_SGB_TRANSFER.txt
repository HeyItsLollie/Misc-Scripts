VM_SGB_TRANSFER command list:
https://gbdev.io/pandocs/SGB_Command_Summary.html



00h PAL01 | 01h PAL23 | 02h PAL03 | 03h PAL12
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
https://gbdev.io/pandocs/SGB_Command_Pallete.html#sgb-command-00h---pal01

VM_SGB_TRANSFER
.db ((0x00 << 3) | 1), 0xFF, 0x7F, 0x1F, 0x04, 0xE0, 0x07, 0x00, 0x7C, 0, 0, 0, 0, 0, 0, 0 ; PAL01 packet
;      #1         #2      ^ #3 ^      ^ #4 ^      ^ #5 ^      ^ #6 ^    #7    #8    #9  #10

 #1: 00h - PAL01 (Currently set)
     01h - PAL23
	 02h - PAL03
	 03h - PAL12
	 Set the colors for palettes X and Y.
	 These commands force you to set two palettes at a time.
	 Attempting to leave one palette blank or zeroed out will cause
	 that palette to be set as completely black.
	 Consider VM_LOAD_PALETTE, detailed at the end of this section.
 #2: The length of the packet.
	 For PALxy, this is fixed and will always be 1.
 #3: Color 0, the "global" color for all palettes.
     Notice that we're using two bytes here. All colors use two bytes.
	 The format is detailed further below.
 #4: PAL0, Color 1
 #5: PAL0, Color 2
 #6: PAL0, Color 3
 #7: PAL1, Color 1
 #8: PAL1, Color 2
 #9: PAL1, Color 3
#10: Unused, always 0.

In the example script above, Color 0 has been set to white.
PAL0's Colors 1 - 3 have been set to the colors that GB Studio returns
when using Red 31, Green 31, and Blue 31 respectively.
Note that because #7, #8, and #9 are set to 0, PAL1's colors will be
set to an all-black palette. Be sure to set these colors correctly too.


PALETTE RGB raw colors
BizHawk "raw" color values appear in reverse order,
compared to what we write to reproduce them.
  Red: $041F (255,  0,  8)
Green: $07E0 (  0,255,  8)
 Blue: $7C00 (  0,  0,255)

Reproduction:
0x1F, 0x04, 0xE0, 0x07, 0, 0x7C
  Red (0x1F, 0x04): $041F
Green (0xE0, 0x07): $07E0
 Blue (0x00, 0x7C): $7C00


I've written values below in two forms:
- SGB/CGB palette values, as they appear in GB Studio
- The corresponding HEX values, for ""easier"" adding together

I've also created a cheat sheet for these values.
https://github.com/HeyItsLollie/Misc-Scripts/blob/master/SGB-Tests-and-Notes/Cheat%20Sheet%20-%2000h%20PAL01.png


BYTE 1 of 2
Red:
	0x00 to 0x1F (loop)
		SGB	: 00 to 15 / 16 to 31 (+1 for every 0x01)
		HEX	: 00 to 0F / 10 to 1F
Green:
	0x2? to 0xE?
		SGB	: 00 / 01 / 02 / 03 / 04 / 05 / 06 / 07
		HEX	: 00 / 20 / 40 / 60 / 80 / A0 / C0 / E0
Blue: n/a

BYTE 2 of 2
Red: n/a
Green:
	0x?0/?1/?2/?3 (loop)
		SGB	: 00 /  08 /  16 /  24
		HEX	: 00 /  01 /  02 /  03
Blue:
	0x0? to 0x7? (loop)
		SGB	: 00 /  04 /  08 /  12 /  16 /  20 /  24 /  28
		HEX	: 00 /  10 /  20 /  30 /  40 /  50 /  60 /  70
	0x?0/?4/?8/?C (loop)
		SGB	: 00 / 01 / 02 / 03
		HEX	: 00 / 04 / 08 / 0C


Red is stored exclusively in Byte 1. Its values are a 1:1 translation
from decimal to hex. It loops to R0 at 20h.
Red shares Byte 1 with Green.
				00h = R0, 01h = R1, 02h = R2, 03h = R3
				04h = R4, 05h = R5, 06h = R6, 07h = R7

Green is spread across both bytes. It's a bit of a mess.
Byte 1, Bit 1 = G increments by 1 every 20h, from 0 - 7.
                Green shares a byte with Red.
				00h = G0, 20h = G1, 40h = G2, 60h = G3
				80h = G4, A0h = G5, C0h = G6, E0h = G7
				
Byte 2: Bit 2 = Every 1h, G increments by 8, from 0 - 24.
                Green loops to G0 at 4h, and shares a byte with Blue.
				00h = G0, 01h = G8, 02h = G16, 03h = G24
				04h = G0, 05h = G8, 06h = G16, 07h = G24
				etc

Blue is stored exclusively in Byte 2.
B increments by 1 every 04h, and loops to B0 at 80h.
Blue shares Byte 2 with Green.
				00h = B0, 04h = B1, 08h = B2, 0Ch = B3
				10h = B4, 14h = B5, 18h = B6, 1Ch = B7
				etc




VM_LOAD PALETTE
~~~~~~~~~~~~~~~
As we can see, the PALxy commands are kind of a hassle to set up.
Thankfully, there's a far more user-friendly option for GBVM.

Via @toxa in GB Studio discord:
~~~
VM_LOAD_PALETTE         0b11110000, ^/.PALETTE_COMMIT | .PALETTE_BKG/
.CGB_PAL 0,0,0 0,0,0 0,0,0 0,0,0
.CGB_PAL 0,0,0 0,0,0 0,0,0 0,0,0
.CGB_PAL 0,0,0 0,0,0 0,0,0 0,0,0
.CGB_PAL 0,0,0 0,0,0 0,0,0 0,0,0

put R, G, B values instead of zeroes into .GGB_PAL rows
each group of 3 numbers is R, G, B - 4 groups for 4 colors in the palette

0b11110000 is a bit mask. the number of "ones" must match the number of
.CGB_PAL rows. position of 1 in a binary number tells in what palette
next .CGB_PAL row goes.
~~~

So if I wanted to only change the third SGB palette, and set it to
a palette with the colors White, Red, Green, and Blue, I would use
the following code as a GBVM script:

                          4321
						  vvvv
VM_LOAD_PALETTE         0b01000000, ^/.PALETTE_COMMIT | .PALETTE_BKG/
.CGB_PAL 31,31,31 31,0,0 0,31,0 0,0,31

Way, way easier.


Related info:
NalaFala has made a plug-in to set new palette colors in GB Studio.
This *doesn't* work with Super Game Boy. It's for DMG and Color GB.
This is still useful outside of SGB, but just keep this in mind.
https://github.com/Y0UR-U5ERNAME/gbs-plugin-collection/blob/main/plugins/setPaletteColorsPlugin/events/eventSetPaletteColors.js




04h ATTR_BLK
~~~~~~~~~~~~
https://gbdev.io/pandocs/SGB_Command_Attribute.html#sgb-command-04h---attr_blk

VM_SGB_TRANSFER
.db ((0x04 << 3) | 1), 2, (1 << 0), (1 << 1), 2, 3, 17, 5, (1 << 0), (2 << 1), 2, 6, 17, 8, 0, 0 ; ATTR_BLK, two palettes over one packet
        #1         #2  #3    #4        #5    #6 #7  #8 #9    #10       #11   #12 #13 #14 #15 #16

 #1: 04h - ATTR_BLK
	 Apply color palettes to a rectangle block of tiles.
 #2: Length, number of .db packets. We're only sending one packet.
 #3: Number of data sets, ie; How many palette regions are we setting
	 in a single SGB transfer command?
	 Here, we're setting two palette regions.
 #4: This is the start of Data Set #1.
	 This byte determines how we can apply palettes to a block of tiles.
     Bit 0: (X << 0) "Change palette inside block"
	 Bit 1: (X << 1) "Change palette of block's border"
	 Bit 2: (X << 2) "Change palette outside block"
	 For each bit, X can be 0 (Disable) or 1 (Enable)
			
	 All three can be set simultaneously, using:
	 ((1 << 0) | (0 << 1) | (1 << 2))
	     #A         #B         #C
		A: 1 (Enable)  Inside block
		B: 0 (Disable) Block's border
		C: 1 (Enable)  Outside block
#####TODO: Haven't fully tested this yet
		
	 Here, we're changing the palette for tiles inside the block.
	 We aren't setting any other regions, so we only need to set Bit 0.
 #5: The palette/s to apply to our block/s.
	 As in #4, the bits are as follows:
	 Bit 0: (X << 0) "Palette number for inside block"
	 Bit 1: (X << 1) "Palette number for block's border"
	 Bit 2: (X << 2) "Palette number for outside block"
     X can be set to one of 4 available palettes: 0 (PAL0) to 3 (PAL3).
	 In GB Studio's "Palettes" window, these map to Palettes 5 to 8.
#####NOTE:	As of 3.0.3, there seems to be a bug where
			Palette 7 (PAL2) is ignored, and GB Studio
			sends a default palette instead.
			Workaround: 01h PAL23 or VM_LOAD_PALETTE
	 
	 We can set palettes for every block type (#4) with the relevant bit:
	 ((1 << 0) | (2 << 1) | (0 << 2))
	     #A         #B         #C
		A: 1 (PAL1) Inside block
		B: 2 (PAL2) Block's border
		C: 0 (PAL0) Outside block
#####TODO: Haven't fully tested this yet
	
	 Here, we only need to set a palette for inside the block, as it's
	 the only region we enabled in #4. We've set this to PAL1 (1).
 #6: Top-left corner of block: X Position.
 #7: Top-left corner of block: Y Position.
 #8: Bottom-right corner of block: X Position.
 #9: Bottom-right corner of block: Y Position.
#10: This is the start of Data Set #2.
     This data set reads as follows:
	 #10: Change palette inside block: Enabled
	 #11: Palette for inside block: PAL2
	 #12: Top-left X: 2
	 #13: Top-left Y: 6
	 #14: Bottom-right X: 17
	 #15: Bottom-right Y: 8
#16: There is no more data, so the rest of the packet is padded with 0's.


VM_SGB_TRANSFER
.db ((0x04 << 3) | 2), 3, 0x01, 1, 10, 2, 17, 7, 0x01, 2, 2, 10, 9, 15, 0x01, 3 ; three palettes over two packets
.db 10, 10, 17, 15, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 ; Lots of 0's to pad the packet thanks to the third palette.

VM_SGB_TRANSFER
.db ((0x04 << 3) | 2), 5, 0x01, 1, 2, 3, 17, 5, 0x01, 2, 2, 6, 17, 8, 0x01, 3 ; five palettes over two packets
.db 0, 11, 19, 15, 0x01, 1, 0, 16, 19, 17, 0x01, 2, 8, 6, 8, 6 ; We've filled both packets, so no padding is needed




05h ATTR_LIN
~~~~~~~~~~~~
https://gbdev.io/pandocs/SGB_Command_Attribute.html#sgb-command-05h---attr_lin

VM_SGB_TRANSFER
.db ((0x05 << 3) | 1), 2, ((3 << 0) | (1 << 5) | (0 << 7)), ((11 << 0) | (2 << 5) | (1 << 7)), 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 ; ATTR_LIN
        #1         #2  #3     #4          #5          #6         #7         #8         #9     #10

 #1: 05h - ATTR_LIN
	 Apply a palette to an entire column or row of tiles
 #2: Length, number of .db packets. Here, we're only sending one packet.
 #3: Number of data sets, ie; How many palette regions are we setting
	 in a single SGB transfer command?
	 Here, we've set two palette regions.
 #4: This is the start of Data Set #1.
	 All data for one set is contained in a single byte, using bits.
	 Bits 0 - 4 are reserved for the X *or* Y position of the line,
	 for Vertical or Horizontal lines respectively. See #6.
	 We only need to use Bit 0, as we can use numbers 0 - 20.
	 Here, position is set to X 3.
 #5: Bits 5 - 6 are reserved for palette number 0 - 3.
	 We only need to use Bit 5.
	 Here, we've set PAL1.
 #6: This sets whether the line is Vertical (0) or Horizontal (1).
	 Here, we're creating a Vertical line, so #4 will set the X position.
 #7: This is the start of Data Set #2.
	 Everything from #4 to #6 applies here too, as for each data set.
	 This data set reads as follows:
	 #7: Position is Y 11
	 #8: Palette: PAL2
	 #9: Horizontal line, so #7 sets Y position.
#10: There is no more data, so the rest of the packet is padded with 0's.




06h ATTR_DIV
~~~~~~~~~~~~
https://gbdev.io/pandocs/SGB_Command_Attribute.html#sgb-command-06h---attr_div

VM_SGB_TRANSFER
.db ((0x06 << 3) | 1), ; ATTR_DIV
        #1         #2  #3     #4          #5          #6         #7         #8         #9     #10

 #1: 06h - ATTR_DIV
 #2: 
 #3: 
 #4: 
 #5: 
 #6: 
 #7: 
 #8: 
 #9: 
#10: 




07h ATTR_CHR
~~~~~~~~~~~~
https://gbdev.io/pandocs/SGB_Command_Attribute.html#sgb-command-07h---attr_chr

VM_SGB_TRANSFER
.db ((0x07 << 3) | 1), ; ATTR_CHR
        #1         #2  #3     #4          #5          #6         #7         #8         #9     #10

 #1: 07h - ATTR_CHR
 #2: 
 #3: 
 #4: 
 #5: 
 #6: 
 #7: 
 #8: 
 #9: 
#10: 




08h SOUND
~~~~~~~~~~~~
https://gbdev.io/pandocs/SGB_Command_Sound.html#sgb-command-08h---sound

VM_SGB_TRANSFER
.db ((0x08 << 3) | 1), ; SOUND
        #1         #2  #3     #4          #5          #6         #7         #8         #9     #10

 #1: 08h - SOUND
 #2: 
 #3: 
 #4: 
 #5: 
 #6: 
 #7: 
 #8: 
 #9: 
#10: 